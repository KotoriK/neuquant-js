{"version":3,"file":"index.cjs","sources":["../src/neuquant.js","../src/helpers.js"],"sourcesContent":["/**\r\n * NeuQuant Neural-Network Quantization Algorithm\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * See \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * See also http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n *\r\n * Copyright (c) 2012 Johan Nordberg (JavaScript port)\r\n * Copyright (c) 2014 Devon Govett (JavaScript port)\r\n */\r\n\r\nconst prime1 = 499\r\nconst prime2 = 491\r\nconst prime3 = 487\r\nconst prime4 = 503\r\n\r\nconst maxprime = Math.max(prime1, prime2, prime3, prime4)\r\nconst minpicturebytes = (3 * maxprime)\r\n\r\nconst defaults = {\r\n  ncycles: 100,\r\n  netsize: 256,\r\n  samplefac: 10\r\n}\r\n\r\nconst assign = function (target) {\r\n  for (let i = 1, l = arguments.length; i < l; i++) {\r\n    const nextSource = arguments[i]\r\n    if (nextSource != null) {\r\n      for (const nextKey in nextSource) {\r\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n          target[nextKey] = nextSource[nextKey]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return target\r\n}\r\n\r\nexport default class NeuQuant {\r\n  constructor (pixels, options) {\r\n    assign(this, defaults, {pixels}, options)\r\n\r\n    if (this.netsize < 4 || this.netsize > 256) {\r\n      throw new Error('Color count must be between 4 and 256')\r\n    }\r\n\r\n    if (this.samplefac < 1 || this.samplefac > 30) {\r\n      throw new Error('Sampling factor must be between 1 and 30')\r\n    }\r\n\r\n    this.maxnetpos = this.netsize - 1\r\n\r\n    this.netbiasshift = 4\r\n    this.intbiasshift = 16\r\n    this.intbias = (1 << this.intbiasshift)\r\n    this.gammashift = 10\r\n    this.gamma = (1 << this.gammashift)\r\n    this.betashift = 10\r\n    this.beta = (this.intbias >> this.betashift)\r\n    this.betagamma = (this.beta * this.gamma)\r\n\r\n    this.initrad = (this.netsize >> 3)\r\n    this.radiusbiasshift = 6\r\n    this.radiusbias = (1 << this.radiusbiasshift)\r\n    this.initradius = (this.initrad * this.radiusbias)\r\n    this.radiusdec = 30\r\n\r\n    this.alphabiasshift = 10\r\n    this.initalpha = (1 << this.alphabiasshift)\r\n\r\n    this.radbiasshift = 8\r\n    this.radbias = (1 << this.radbiasshift)\r\n    this.alpharadbshift = (this.alphabiasshift + this.radbiasshift)\r\n    this.alpharadbias = (1 << this.alpharadbshift)\r\n\r\n    this.network = []\r\n    this.netindex = new Uint32Array(256)\r\n    this.bias = new Uint32Array(this.netsize)\r\n    this.freq = new Uint32Array(this.netsize)\r\n    this.radpower = new Uint32Array(this.netsize >> 3)\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      let v = (i << (this.netbiasshift + 8)) / this.netsize\r\n      this.network[i] = new Float64Array([v, v, v, 0])\r\n      this.freq[i] = this.intbias / this.netsize\r\n      this.bias[i] = 0\r\n    }\r\n  }\r\n\r\n  unbiasnet () {\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      this.network[i][0] >>= this.netbiasshift\r\n      this.network[i][1] >>= this.netbiasshift\r\n      this.network[i][2] >>= this.netbiasshift\r\n      this.network[i][3] = i\r\n    }\r\n  }\r\n\r\n  altersingle (alpha, i, b, g, r) {\r\n    this.network[i][0] -= (alpha * (this.network[i][0] - b)) / this.initalpha\r\n    this.network[i][1] -= (alpha * (this.network[i][1] - g)) / this.initalpha\r\n    this.network[i][2] -= (alpha * (this.network[i][2] - r)) / this.initalpha\r\n  }\r\n\r\n  alterneigh (radius, i, b, g, r) {\r\n    const lo = Math.abs(i - radius)\r\n    const hi = Math.min(i + radius, this.netsize)\r\n\r\n    let j = i + 1\r\n    let k = i - 1\r\n    let m = 1\r\n\r\n    while ((j < hi) || (k > lo)) {\r\n      const a = this.radpower[m++]\r\n\r\n      if (j < hi) {\r\n        const p = this.network[j++]\r\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\r\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\r\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\r\n      }\r\n\r\n      if (k > lo) {\r\n        const p = this.network[k--]\r\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\r\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\r\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\r\n      }\r\n    }\r\n  }\r\n\r\n  contest (b, g, r) {\r\n    let bestd = ~(1 << 31)\r\n    let bestbiasd = bestd\r\n    let bestpos = -1\r\n    let bestbiaspos = bestpos\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      let n = this.network[i]\r\n\r\n      let dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r)\r\n      if (dist < bestd) {\r\n        bestd = dist\r\n        bestpos = i\r\n      }\r\n\r\n      let biasdist = dist - ((this.bias[i]) >> (this.intbiasshift - this.netbiasshift))\r\n      if (biasdist < bestbiasd) {\r\n        bestbiasd = biasdist\r\n        bestbiaspos = i\r\n      }\r\n\r\n      let betafreq = (this.freq[i] >> this.betashift)\r\n      this.freq[i] -= betafreq\r\n      this.bias[i] += (betafreq << this.gammashift)\r\n    }\r\n\r\n    this.freq[bestpos] += this.beta\r\n    this.bias[bestpos] -= this.betagamma\r\n\r\n    return bestbiaspos\r\n  }\r\n\r\n  inxbuild () {\r\n    let previouscol = 0\r\n    let startpos = 0\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      let p = this.network[i]\r\n      let q = null\r\n      let smallpos = i\r\n      let smallval = p[1]\r\n\r\n      for (let j = i + 1; j < l; j++) {\r\n        q = this.network[j]\r\n        if (q[1] < smallval) {\r\n          smallpos = j\r\n          smallval = q[1]\r\n        }\r\n      }\r\n      q = this.network[smallpos]\r\n\r\n      if (i !== smallpos) {\r\n        [p[0], q[0]] = [q[0], p[0]];\r\n        [p[1], q[1]] = [q[1], p[1]];\r\n        [p[2], q[2]] = [q[2], p[2]];\r\n        [p[3], q[3]] = [q[3], p[3]]\r\n      }\r\n\r\n      if (smallval !== previouscol) {\r\n        this.netindex[previouscol] = (startpos + i) >> 1\r\n        for (let j = previouscol + 1; j < smallval; j++) {\r\n          this.netindex[j] = i\r\n        }\r\n        previouscol = smallval\r\n        startpos = i\r\n      }\r\n    }\r\n\r\n    this.netindex[previouscol] = (startpos + this.maxnetpos) >> 1\r\n    for (let i = previouscol + 1; i < 256; i++) {\r\n      this.netindex[i] = this.maxnetpos\r\n    }\r\n  }\r\n\r\n  learn () {\r\n    const lengthcount = this.pixels.length\r\n    const alphadec = 30 + ((this.samplefac - 1) / 3)\r\n    const samplepixels = lengthcount / (3 * this.samplefac)\r\n\r\n    let delta = samplepixels / this.ncycles | 0\r\n    let alpha = this.initalpha\r\n    let radius = this.initradius\r\n\r\n    let rad = radius >> this.radiusbiasshift\r\n\r\n    if (rad <= 1) {\r\n      rad = 0\r\n    }\r\n\r\n    for (let i = 0; i < rad; i++) {\r\n      this.radpower[i] = alpha * (((rad * rad - i * i) * this.radbias) / (rad * rad))\r\n    }\r\n\r\n    let step\r\n    if (lengthcount < minpicturebytes) {\r\n      this.samplefac = 1\r\n      step = 3\r\n    } else if ((lengthcount % prime1) !== 0) {\r\n      step = 3 * prime1\r\n    } else if ((lengthcount % prime2) !== 0) {\r\n      step = 3 * prime2\r\n    } else if ((lengthcount % prime3) !== 0) {\r\n      step = 3 * prime3\r\n    } else {\r\n      step = 3 * prime4\r\n    }\r\n\r\n    let pix = 0\r\n\r\n    for (let i = 0; i < samplepixels;) {\r\n      let b = (this.pixels[pix] & 0xff) << this.netbiasshift\r\n      let g = (this.pixels[pix + 1] & 0xff) << this.netbiasshift\r\n      let r = (this.pixels[pix + 2] & 0xff) << this.netbiasshift\r\n\r\n      let j = this.contest(b, g, r)\r\n      this.altersingle(alpha, j, b, g, r)\r\n      if (rad !== 0) {\r\n        this.alterneigh(rad, j, b, g, r)\r\n      }\r\n\r\n      pix += step\r\n      if (pix >= lengthcount) {\r\n        pix -= lengthcount\r\n      }\r\n\r\n      if (delta === 0) {\r\n        delta = 1\r\n      }\r\n\r\n      if (++i % delta === 0) {\r\n        alpha -= alpha / alphadec\r\n        radius -= radius / this.radiusdec\r\n        rad = radius >> this.radiusbiasshift\r\n\r\n        if (rad <= 1) {\r\n          rad = 0\r\n        }\r\n\r\n        for (let k = 0; k < rad; k++) {\r\n          this.radpower[k] = alpha * (((rad * rad - k * k) * this.radbias) / (rad * rad))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  buildColorMap () {\r\n    this.learn()\r\n    this.unbiasnet()\r\n    this.inxbuild()\r\n  }\r\n\r\n  getColorMap () {\r\n    const map = new Buffer(this.netsize * 3)\r\n    const index = new Buffer(this.netsize)\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      index[this.network[i][3]] = i\r\n    }\r\n\r\n    for (let i = 0, j = 0, k = 0, l = this.netsize; i < l; i++) {\r\n      k = index[i]\r\n      map[j++] = this.network[k][0] & 0xff\r\n      map[j++] = this.network[k][1] & 0xff\r\n      map[j++] = this.network[k][2] & 0xff\r\n    }\r\n\r\n    return map\r\n  }\r\n}\r\n","import NeuQuant from './neuquant'\r\n\r\nfunction findClosest (palette, r, g, b) {\r\n  let minpos = 0\r\n  let mind = 256 * 256 * 256\r\n\r\n  for (let i = 0, l = palette.length; i < l;) {\r\n    const dr = r - palette[i++]\r\n    const dg = g - palette[i++]\r\n    const db = b - palette[i]\r\n    const d = dr * dr + dg * dg + db * db\r\n    const pos = i / 3 | 0\r\n\r\n    if (d < mind) {\r\n      mind = d\r\n      minpos = pos\r\n    }\r\n\r\n    i++\r\n  }\r\n\r\n  return minpos\r\n}\r\n\r\nexport function palette (pixels, options) {\r\n  const nq = new NeuQuant(pixels, options)\r\n  nq.buildColorMap()\r\n  return nq.getColorMap()\r\n}\r\n\r\nexport function indexed (pixels, palette) {\r\n  const indexed = new Buffer(pixels.length / 3)\r\n  const memo = {}\r\n\r\n  for (let i = 0, j = 0, l = pixels.length; i < l;) {\r\n    const r = pixels[i++]\r\n    const g = pixels[i++]\r\n    const b = pixels[i++]\r\n    const k = r << 16 | g << 8 | b\r\n\r\n    if (k in memo) {\r\n      indexed[j++] = memo[k]\r\n    } else {\r\n      indexed[j++] = memo[k] = findClosest(palette, r, g, b)\r\n    }\r\n  }\r\n\r\n  return indexed\r\n}\r\n\r\nexport function quantize (pixels, options) {\r\n  const p = palette(pixels, options)\r\n  const i = indexed(pixels, p)\r\n\r\n  return {\r\n    palette: p,\r\n    indexed: i\r\n  }\r\n}\r\n"],"names":["minpicturebytes","Math","max","defaults","ncycles","netsize","samplefac","pixels","options","target","i","l","arguments","length","nextSource","nextKey","Object","prototype","hasOwnProperty","call","assign","this","Error","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","radbiasshift","radbias","alpharadbshift","alpharadbias","network","netindex","Uint32Array","bias","freq","radpower","v","Float64Array","unbiasnet","altersingle","alpha","b","g","r","alterneigh","radius","lo","abs","hi","min","j","k","m","a","p","_p","contest","bestd","bestbiasd","bestpos","bestbiaspos","n","dist","biasdist","betafreq","inxbuild","previouscol","startpos","q","smallpos","smallval","_ref","_ref2","_ref3","_ref4","_i","learn","lengthcount","alphadec","samplepixels","delta","rad","step","pix","_i2","buildColorMap","getColorMap","map","Buffer","index","_i3","palette","minpos","mind","dr","dg","db","d","NeuQuant","nq","indexed","memo","findClosest"],"mappings":"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"}