{"version":3,"file":"index.modern.js","sources":["../src/neuquant.js","../src/helpers.js"],"sourcesContent":["/**\n * NeuQuant Neural-Network Quantization Algorithm\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * See \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * See also http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n *\n * Copyright (c) 2012 Johan Nordberg (JavaScript port)\n * Copyright (c) 2014 Devon Govett (JavaScript port)\n */\n\nconst prime1 = 499\nconst prime2 = 491\nconst prime3 = 487\nconst prime4 = 503\n\nconst maxprime = Math.max(prime1, prime2, prime3, prime4)\nconst minpicturebytes = (3 * maxprime)\n\nconst defaults = {\n  ncycles: 100,\n  netsize: 256,\n  samplefac: 10\n}\n\nconst assign = function (target) {\n  for (let i = 1, l = arguments.length; i < l; i++) {\n    const nextSource = arguments[i]\n    if (nextSource != null) {\n      for (const nextKey in nextSource) {\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n          target[nextKey] = nextSource[nextKey]\n        }\n      }\n    }\n  }\n  return target\n}\n\nexport default class NeuQuant {\n  constructor (pixels, options) {\n    assign(this, defaults, {pixels}, options)\n\n    if (this.netsize < 4 || this.netsize > 256) {\n      throw new Error('Color count must be between 4 and 256')\n    }\n\n    if (this.samplefac < 1 || this.samplefac > 30) {\n      throw new Error('Sampling factor must be between 1 and 30')\n    }\n\n    this.maxnetpos = this.netsize - 1\n\n    this.netbiasshift = 4\n    this.intbiasshift = 16\n    this.intbias = (1 << this.intbiasshift)\n    this.gammashift = 10\n    this.gamma = (1 << this.gammashift)\n    this.betashift = 10\n    this.beta = (this.intbias >> this.betashift)\n    this.betagamma = (this.beta * this.gamma)\n\n    this.initrad = (this.netsize >> 3)\n    this.radiusbiasshift = 6\n    this.radiusbias = (1 << this.radiusbiasshift)\n    this.initradius = (this.initrad * this.radiusbias)\n    this.radiusdec = 30\n\n    this.alphabiasshift = 10\n    this.initalpha = (1 << this.alphabiasshift)\n\n    this.radbiasshift = 8\n    this.radbias = (1 << this.radbiasshift)\n    this.alpharadbshift = (this.alphabiasshift + this.radbiasshift)\n    this.alpharadbias = (1 << this.alpharadbshift)\n\n    this.network = []\n    this.netindex = new Uint32Array(256)\n    this.bias = new Uint32Array(this.netsize)\n    this.freq = new Uint32Array(this.netsize)\n    this.radpower = new Uint32Array(this.netsize >> 3)\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      let v = (i << (this.netbiasshift + 8)) / this.netsize\n      this.network[i] = new Float64Array([v, v, v, 0])\n      this.freq[i] = this.intbias / this.netsize\n      this.bias[i] = 0\n    }\n  }\n\n  unbiasnet () {\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      this.network[i][0] >>= this.netbiasshift\n      this.network[i][1] >>= this.netbiasshift\n      this.network[i][2] >>= this.netbiasshift\n      this.network[i][3] = i\n    }\n  }\n\n  altersingle (alpha, i, b, g, r) {\n    this.network[i][0] -= (alpha * (this.network[i][0] - b)) / this.initalpha\n    this.network[i][1] -= (alpha * (this.network[i][1] - g)) / this.initalpha\n    this.network[i][2] -= (alpha * (this.network[i][2] - r)) / this.initalpha\n  }\n\n  alterneigh (radius, i, b, g, r) {\n    const lo = Math.abs(i - radius)\n    const hi = Math.min(i + radius, this.netsize)\n\n    let j = i + 1\n    let k = i - 1\n    let m = 1\n\n    while ((j < hi) || (k > lo)) {\n      const a = this.radpower[m++]\n\n      if (j < hi) {\n        const p = this.network[j++]\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\n      }\n\n      if (k > lo) {\n        const p = this.network[k--]\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\n      }\n    }\n  }\n\n  contest (b, g, r) {\n    let bestd = ~(1 << 31)\n    let bestbiasd = bestd\n    let bestpos = -1\n    let bestbiaspos = bestpos\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      let n = this.network[i]\n\n      let dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r)\n      if (dist < bestd) {\n        bestd = dist\n        bestpos = i\n      }\n\n      let biasdist = dist - ((this.bias[i]) >> (this.intbiasshift - this.netbiasshift))\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist\n        bestbiaspos = i\n      }\n\n      let betafreq = (this.freq[i] >> this.betashift)\n      this.freq[i] -= betafreq\n      this.bias[i] += (betafreq << this.gammashift)\n    }\n\n    this.freq[bestpos] += this.beta\n    this.bias[bestpos] -= this.betagamma\n\n    return bestbiaspos\n  }\n\n  inxbuild () {\n    let previouscol = 0\n    let startpos = 0\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      let p = this.network[i]\n      let q = null\n      let smallpos = i\n      let smallval = p[1]\n\n      for (let j = i + 1; j < l; j++) {\n        q = this.network[j]\n        if (q[1] < smallval) {\n          smallpos = j\n          smallval = q[1]\n        }\n      }\n      q = this.network[smallpos]\n\n      if (i !== smallpos) {\n        [p[0], q[0]] = [q[0], p[0]];\n        [p[1], q[1]] = [q[1], p[1]];\n        [p[2], q[2]] = [q[2], p[2]];\n        [p[3], q[3]] = [q[3], p[3]]\n      }\n\n      if (smallval !== previouscol) {\n        this.netindex[previouscol] = (startpos + i) >> 1\n        for (let j = previouscol + 1; j < smallval; j++) {\n          this.netindex[j] = i\n        }\n        previouscol = smallval\n        startpos = i\n      }\n    }\n\n    this.netindex[previouscol] = (startpos + this.maxnetpos) >> 1\n    for (let i = previouscol + 1; i < 256; i++) {\n      this.netindex[i] = this.maxnetpos\n    }\n  }\n\n  learn () {\n    const lengthcount = this.pixels.length\n    const alphadec = 30 + ((this.samplefac - 1) / 3)\n    const samplepixels = lengthcount / (3 * this.samplefac)\n\n    let delta = samplepixels / this.ncycles | 0\n    let alpha = this.initalpha\n    let radius = this.initradius\n\n    let rad = radius >> this.radiusbiasshift\n\n    if (rad <= 1) {\n      rad = 0\n    }\n\n    for (let i = 0; i < rad; i++) {\n      this.radpower[i] = alpha * (((rad * rad - i * i) * this.radbias) / (rad * rad))\n    }\n\n    let step\n    if (lengthcount < minpicturebytes) {\n      this.samplefac = 1\n      step = 3\n    } else if ((lengthcount % prime1) !== 0) {\n      step = 3 * prime1\n    } else if ((lengthcount % prime2) !== 0) {\n      step = 3 * prime2\n    } else if ((lengthcount % prime3) !== 0) {\n      step = 3 * prime3\n    } else {\n      step = 3 * prime4\n    }\n\n    let pix = 0\n\n    for (let i = 0; i < samplepixels;) {\n      let b = (this.pixels[pix] & 0xff) << this.netbiasshift\n      let g = (this.pixels[pix + 1] & 0xff) << this.netbiasshift\n      let r = (this.pixels[pix + 2] & 0xff) << this.netbiasshift\n\n      let j = this.contest(b, g, r)\n      this.altersingle(alpha, j, b, g, r)\n      if (rad !== 0) {\n        this.alterneigh(rad, j, b, g, r)\n      }\n\n      pix += step\n      if (pix >= lengthcount) {\n        pix -= lengthcount\n      }\n\n      if (delta === 0) {\n        delta = 1\n      }\n\n      if (++i % delta === 0) {\n        alpha -= alpha / alphadec\n        radius -= radius / this.radiusdec\n        rad = radius >> this.radiusbiasshift\n\n        if (rad <= 1) {\n          rad = 0\n        }\n\n        for (let k = 0; k < rad; k++) {\n          this.radpower[k] = alpha * (((rad * rad - k * k) * this.radbias) / (rad * rad))\n        }\n      }\n    }\n  }\n\n  buildColorMap () {\n    this.learn()\n    this.unbiasnet()\n    this.inxbuild()\n  }\n\n  getColorMap () {\n    const map = new Buffer(this.netsize * 3)\n    const index = new Buffer(this.netsize)\n\n    for (let i = 0, l = this.netsize; i < l; i++) {\n      index[this.network[i][3]] = i\n    }\n\n    for (let i = 0, j = 0, k = 0, l = this.netsize; i < l; i++) {\n      k = index[i]\n      map[j++] = this.network[k][0] & 0xff\n      map[j++] = this.network[k][1] & 0xff\n      map[j++] = this.network[k][2] & 0xff\n    }\n\n    return map\n  }\n}\n","import NeuQuant from './neuquant'\n\nfunction findClosest (palette, r, g, b) {\n  let minpos = 0\n  let mind = 256 * 256 * 256\n\n  for (let i = 0, l = palette.length; i < l;) {\n    const dr = r - palette[i++]\n    const dg = g - palette[i++]\n    const db = b - palette[i]\n    const d = dr * dr + dg * dg + db * db\n    const pos = i / 3 | 0\n\n    if (d < mind) {\n      mind = d\n      minpos = pos\n    }\n\n    i++\n  }\n\n  return minpos\n}\n\nexport function palette (pixels, options) {\n  const nq = new NeuQuant(pixels, options)\n  nq.buildColorMap()\n  return nq.getColorMap()\n}\n\nexport function indexed (pixels, palette) {\n  const indexed = []/* new Buffer(pixels.length / 3) */\n  const memo = {}\n\n  for (let i = 0, j = 0, l = pixels.length; i < l;) {\n    const r = pixels[i++]\n    const g = pixels[i++]\n    const b = pixels[i++]\n    const k = r << 16 | g << 8 | b\n\n    if (k in memo) {\n      indexed[j++] = memo[k]\n    } else {\n      indexed[j++] = memo[k] = findClosest(palette, r, g, b)\n    }\n  }\n\n  return indexed\n}\n\nexport function quantize (pixels, options) {\n  const p = palette(pixels, options)\n  const i = indexed(pixels, p)\n\n  return {\n    palette: p,\n    indexed: i\n  }\n}\n"],"names":["prime1","prime2","prime3","prime4","maxprime","Math","max","minpicturebytes","defaults","ncycles","netsize","samplefac","assign","target","i","l","arguments","length","nextSource","nextKey","Object","prototype","hasOwnProperty","call","NeuQuant","constructor","pixels","options","Error","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","radbiasshift","radbias","alpharadbshift","alpharadbias","network","netindex","Uint32Array","bias","freq","radpower","v","Float64Array","unbiasnet","altersingle","alpha","b","g","r","alterneigh","radius","lo","abs","hi","min","j","k","m","a","p","contest","bestd","bestbiasd","bestpos","bestbiaspos","n","dist","biasdist","betafreq","inxbuild","previouscol","startpos","q","smallpos","smallval","learn","lengthcount","alphadec","samplepixels","delta","rad","step","pix","buildColorMap","getColorMap","map","Buffer","index","findClosest","palette","minpos","mind","dr","dg","db","d","pos","nq","indexed","memo","quantize"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAG,GAAG,CAAA;AAClB,MAAMC,MAAM,GAAG,GAAG,CAAA;AAClB,MAAMC,MAAM,GAAG,GAAG,CAAA;AAClB,MAAMC,MAAM,GAAG,GAAG,CAAA;AAElB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACN,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC,CAAA;AACzD,MAAMI,eAAe,GAAI,CAAC,GAAGH,QAAS,CAAA;AAEtC,MAAMI,QAAQ,GAAG;AACfC,EAAAA,OAAO,EAAE,GAAG;AACZC,EAAAA,OAAO,EAAE,GAAG;AACZC,EAAAA,SAAS,EAAE,EAAA;AACb,CAAC,CAAA;AAED,MAAMC,MAAM,GAAG,SAATA,MAAM,CAAaC,MAAM,EAAE;AAC/B,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AAChD,IAAA,MAAMI,UAAU,GAAGF,SAAS,CAACF,CAAC,CAAC,CAAA;IAC/B,IAAII,UAAU,IAAI,IAAI,EAAE;AACtB,MAAA,KAAK,MAAMC,OAAO,IAAID,UAAU,EAAE;AAChC,QAAA,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,UAAU,EAAEC,OAAO,CAAC,EAAE;AAC7DN,UAAAA,MAAM,CAACM,OAAO,CAAC,GAAGD,UAAU,CAACC,OAAO,CAAC,CAAA;AACvC,SAAA;AACF,OAAA;AACF,KAAA;AACF,GAAA;AACA,EAAA,OAAON,MAAM,CAAA;AACf,CAAC,CAAA;AAEc,MAAMW,QAAQ,CAAC;AAC5BC,EAAAA,WAAW,CAAEC,MAAM,EAAEC,OAAO,EAAE;AAC5Bf,IAAAA,MAAM,CAAC,IAAI,EAAEJ,QAAQ,EAAE;AAACkB,MAAAA,MAAAA;KAAO,EAAEC,OAAO,CAAC,CAAA;IAEzC,IAAI,IAAI,CAACjB,OAAO,GAAG,CAAC,IAAI,IAAI,CAACA,OAAO,GAAG,GAAG,EAAE;AAC1C,MAAA,MAAM,IAAIkB,KAAK,CAAC,uCAAuC,CAAC,CAAA;AAC1D,KAAA;IAEA,IAAI,IAAI,CAACjB,SAAS,GAAG,CAAC,IAAI,IAAI,CAACA,SAAS,GAAG,EAAE,EAAE;AAC7C,MAAA,MAAM,IAAIiB,KAAK,CAAC,0CAA0C,CAAC,CAAA;AAC7D,KAAA;AAEA,IAAA,IAAI,CAACC,SAAS,GAAG,IAAI,CAACnB,OAAO,GAAG,CAAC,CAAA;IAEjC,IAAI,CAACoB,YAAY,GAAG,CAAC,CAAA;IACrB,IAAI,CAACC,YAAY,GAAG,EAAE,CAAA;AACtB,IAAA,IAAI,CAACC,OAAO,GAAI,CAAC,IAAI,IAAI,CAACD,YAAa,CAAA;IACvC,IAAI,CAACE,UAAU,GAAG,EAAE,CAAA;AACpB,IAAA,IAAI,CAACC,KAAK,GAAI,CAAC,IAAI,IAAI,CAACD,UAAW,CAAA;IACnC,IAAI,CAACE,SAAS,GAAG,EAAE,CAAA;IACnB,IAAI,CAACC,IAAI,GAAI,IAAI,CAACJ,OAAO,IAAI,IAAI,CAACG,SAAU,CAAA;IAC5C,IAAI,CAACE,SAAS,GAAI,IAAI,CAACD,IAAI,GAAG,IAAI,CAACF,KAAM,CAAA;AAEzC,IAAA,IAAI,CAACI,OAAO,GAAI,IAAI,CAAC5B,OAAO,IAAI,CAAE,CAAA;IAClC,IAAI,CAAC6B,eAAe,GAAG,CAAC,CAAA;AACxB,IAAA,IAAI,CAACC,UAAU,GAAI,CAAC,IAAI,IAAI,CAACD,eAAgB,CAAA;IAC7C,IAAI,CAACE,UAAU,GAAI,IAAI,CAACH,OAAO,GAAG,IAAI,CAACE,UAAW,CAAA;IAClD,IAAI,CAACE,SAAS,GAAG,EAAE,CAAA;IAEnB,IAAI,CAACC,cAAc,GAAG,EAAE,CAAA;AACxB,IAAA,IAAI,CAACC,SAAS,GAAI,CAAC,IAAI,IAAI,CAACD,cAAe,CAAA;IAE3C,IAAI,CAACE,YAAY,GAAG,CAAC,CAAA;AACrB,IAAA,IAAI,CAACC,OAAO,GAAI,CAAC,IAAI,IAAI,CAACD,YAAa,CAAA;IACvC,IAAI,CAACE,cAAc,GAAI,IAAI,CAACJ,cAAc,GAAG,IAAI,CAACE,YAAa,CAAA;AAC/D,IAAA,IAAI,CAACG,YAAY,GAAI,CAAC,IAAI,IAAI,CAACD,cAAe,CAAA;IAE9C,IAAI,CAACE,OAAO,GAAG,EAAE,CAAA;AACjB,IAAA,IAAI,CAACC,QAAQ,GAAG,IAAIC,WAAW,CAAC,GAAG,CAAC,CAAA;IACpC,IAAI,CAACC,IAAI,GAAG,IAAID,WAAW,CAAC,IAAI,CAACzC,OAAO,CAAC,CAAA;IACzC,IAAI,CAAC2C,IAAI,GAAG,IAAIF,WAAW,CAAC,IAAI,CAACzC,OAAO,CAAC,CAAA;IACzC,IAAI,CAAC4C,QAAQ,GAAG,IAAIH,WAAW,CAAC,IAAI,CAACzC,OAAO,IAAI,CAAC,CAAC,CAAA;AAElD,IAAA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACL,OAAO,EAAEI,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AAC5C,MAAA,IAAIyC,CAAC,GAAG,CAACzC,CAAC,IAAK,IAAI,CAACgB,YAAY,GAAG,CAAE,IAAI,IAAI,CAACpB,OAAO,CAAA;AACrD,MAAA,IAAI,CAACuC,OAAO,CAACnC,CAAC,CAAC,GAAG,IAAI0C,YAAY,CAAC,CAACD,CAAC,EAAEA,CAAC,EAAEA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AAChD,MAAA,IAAI,CAACF,IAAI,CAACvC,CAAC,CAAC,GAAG,IAAI,CAACkB,OAAO,GAAG,IAAI,CAACtB,OAAO,CAAA;AAC1C,MAAA,IAAI,CAAC0C,IAAI,CAACtC,CAAC,CAAC,GAAG,CAAC,CAAA;AAClB,KAAA;AACF,GAAA;AAEA2C,EAAAA,SAAS,GAAI;AACX,IAAA,KAAK,IAAI3C,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACL,OAAO,EAAEI,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MAC5C,IAAI,CAACmC,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAACgB,YAAY,CAAA;MACxC,IAAI,CAACmB,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAACgB,YAAY,CAAA;MACxC,IAAI,CAACmB,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAACgB,YAAY,CAAA;MACxC,IAAI,CAACmB,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAA;AACxB,KAAA;AACF,GAAA;EAEA4C,WAAW,CAAEC,KAAK,EAAE7C,CAAC,EAAE8C,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC9B,IAAI,CAACb,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAK6C,KAAK,IAAI,IAAI,CAACV,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG8C,CAAC,CAAC,GAAI,IAAI,CAAChB,SAAS,CAAA;IACzE,IAAI,CAACK,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAK6C,KAAK,IAAI,IAAI,CAACV,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG+C,CAAC,CAAC,GAAI,IAAI,CAACjB,SAAS,CAAA;IACzE,IAAI,CAACK,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAK6C,KAAK,IAAI,IAAI,CAACV,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGgD,CAAC,CAAC,GAAI,IAAI,CAAClB,SAAS,CAAA;AAC3E,GAAA;EAEAmB,UAAU,CAAEC,MAAM,EAAElD,CAAC,EAAE8C,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC9B,MAAMG,EAAE,GAAG5D,IAAI,CAAC6D,GAAG,CAACpD,CAAC,GAAGkD,MAAM,CAAC,CAAA;AAC/B,IAAA,MAAMG,EAAE,GAAG9D,IAAI,CAAC+D,GAAG,CAACtD,CAAC,GAAGkD,MAAM,EAAE,IAAI,CAACtD,OAAO,CAAC,CAAA;AAE7C,IAAA,IAAI2D,CAAC,GAAGvD,CAAC,GAAG,CAAC,CAAA;AACb,IAAA,IAAIwD,CAAC,GAAGxD,CAAC,GAAG,CAAC,CAAA;IACb,IAAIyD,CAAC,GAAG,CAAC,CAAA;AAET,IAAA,OAAQF,CAAC,GAAGF,EAAE,IAAMG,CAAC,GAAGL,EAAG,EAAE;MAC3B,MAAMO,CAAC,GAAG,IAAI,CAAClB,QAAQ,CAACiB,CAAC,EAAE,CAAC,CAAA;MAE5B,IAAIF,CAAC,GAAGF,EAAE,EAAE;QACV,MAAMM,CAAC,GAAG,IAAI,CAACxB,OAAO,CAACoB,CAAC,EAAE,CAAC,CAAA;AAC3BI,QAAAA,CAAC,CAAC,CAAC,CAAC,IAAKD,CAAC,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAGb,CAAC,CAAC,GAAI,IAAI,CAACZ,YAAY,CAAA;AAC5CyB,QAAAA,CAAC,CAAC,CAAC,CAAC,IAAKD,CAAC,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAGZ,CAAC,CAAC,GAAI,IAAI,CAACb,YAAY,CAAA;AAC5CyB,QAAAA,CAAC,CAAC,CAAC,CAAC,IAAKD,CAAC,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAGX,CAAC,CAAC,GAAI,IAAI,CAACd,YAAY,CAAA;AAC9C,OAAA;MAEA,IAAIsB,CAAC,GAAGL,EAAE,EAAE;QACV,MAAMQ,CAAC,GAAG,IAAI,CAACxB,OAAO,CAACqB,CAAC,EAAE,CAAC,CAAA;AAC3BG,QAAAA,CAAC,CAAC,CAAC,CAAC,IAAKD,CAAC,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAGb,CAAC,CAAC,GAAI,IAAI,CAACZ,YAAY,CAAA;AAC5CyB,QAAAA,CAAC,CAAC,CAAC,CAAC,IAAKD,CAAC,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAGZ,CAAC,CAAC,GAAI,IAAI,CAACb,YAAY,CAAA;AAC5CyB,QAAAA,CAAC,CAAC,CAAC,CAAC,IAAKD,CAAC,IAAIC,CAAC,CAAC,CAAC,CAAC,GAAGX,CAAC,CAAC,GAAI,IAAI,CAACd,YAAY,CAAA;AAC9C,OAAA;AACF,KAAA;AACF,GAAA;AAEA0B,EAAAA,OAAO,CAAEd,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;AAChB,IAAA,IAAIa,KAAK,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAA;IACtB,IAAIC,SAAS,GAAGD,KAAK,CAAA;IACrB,IAAIE,OAAO,GAAG,CAAC,CAAC,CAAA;IAChB,IAAIC,WAAW,GAAGD,OAAO,CAAA;AAEzB,IAAA,KAAK,IAAI/D,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACL,OAAO,EAAEI,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AAC5C,MAAA,IAAIiE,CAAC,GAAG,IAAI,CAAC9B,OAAO,CAACnC,CAAC,CAAC,CAAA;AAEvB,MAAA,IAAIkE,IAAI,GAAG3E,IAAI,CAAC6D,GAAG,CAACa,CAAC,CAAC,CAAC,CAAC,GAAGnB,CAAC,CAAC,GAAGvD,IAAI,CAAC6D,GAAG,CAACa,CAAC,CAAC,CAAC,CAAC,GAAGlB,CAAC,CAAC,GAAGxD,IAAI,CAAC6D,GAAG,CAACa,CAAC,CAAC,CAAC,CAAC,GAAGjB,CAAC,CAAC,CAAA;MACvE,IAAIkB,IAAI,GAAGL,KAAK,EAAE;AAChBA,QAAAA,KAAK,GAAGK,IAAI,CAAA;AACZH,QAAAA,OAAO,GAAG/D,CAAC,CAAA;AACb,OAAA;AAEA,MAAA,IAAImE,QAAQ,GAAGD,IAAI,IAAK,IAAI,CAAC5B,IAAI,CAACtC,CAAC,CAAC,IAAM,IAAI,CAACiB,YAAY,GAAG,IAAI,CAACD,YAAa,CAAC,CAAA;MACjF,IAAImD,QAAQ,GAAGL,SAAS,EAAE;AACxBA,QAAAA,SAAS,GAAGK,QAAQ,CAAA;AACpBH,QAAAA,WAAW,GAAGhE,CAAC,CAAA;AACjB,OAAA;MAEA,IAAIoE,QAAQ,GAAI,IAAI,CAAC7B,IAAI,CAACvC,CAAC,CAAC,IAAI,IAAI,CAACqB,SAAU,CAAA;AAC/C,MAAA,IAAI,CAACkB,IAAI,CAACvC,CAAC,CAAC,IAAIoE,QAAQ,CAAA;MACxB,IAAI,CAAC9B,IAAI,CAACtC,CAAC,CAAC,IAAKoE,QAAQ,IAAI,IAAI,CAACjD,UAAW,CAAA;AAC/C,KAAA;IAEA,IAAI,CAACoB,IAAI,CAACwB,OAAO,CAAC,IAAI,IAAI,CAACzC,IAAI,CAAA;IAC/B,IAAI,CAACgB,IAAI,CAACyB,OAAO,CAAC,IAAI,IAAI,CAACxC,SAAS,CAAA;AAEpC,IAAA,OAAOyC,WAAW,CAAA;AACpB,GAAA;AAEAK,EAAAA,QAAQ,GAAI;IACV,IAAIC,WAAW,GAAG,CAAC,CAAA;IACnB,IAAIC,QAAQ,GAAG,CAAC,CAAA;AAEhB,IAAA,KAAK,IAAIvE,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACL,OAAO,EAAEI,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AAC5C,MAAA,IAAI2D,CAAC,GAAG,IAAI,CAACxB,OAAO,CAACnC,CAAC,CAAC,CAAA;MACvB,IAAIwE,CAAC,GAAG,IAAI,CAAA;MACZ,IAAIC,QAAQ,GAAGzE,CAAC,CAAA;AAChB,MAAA,IAAI0E,QAAQ,GAAGf,CAAC,CAAC,CAAC,CAAC,CAAA;AAEnB,MAAA,KAAK,IAAIJ,CAAC,GAAGvD,CAAC,GAAG,CAAC,EAAEuD,CAAC,GAAGtD,CAAC,EAAEsD,CAAC,EAAE,EAAE;AAC9BiB,QAAAA,CAAC,GAAG,IAAI,CAACrC,OAAO,CAACoB,CAAC,CAAC,CAAA;AACnB,QAAA,IAAIiB,CAAC,CAAC,CAAC,CAAC,GAAGE,QAAQ,EAAE;AACnBD,UAAAA,QAAQ,GAAGlB,CAAC,CAAA;AACZmB,UAAAA,QAAQ,GAAGF,CAAC,CAAC,CAAC,CAAC,CAAA;AACjB,SAAA;AACF,OAAA;AACAA,MAAAA,CAAC,GAAG,IAAI,CAACrC,OAAO,CAACsC,QAAQ,CAAC,CAAA;MAE1B,IAAIzE,CAAC,KAAKyE,QAAQ,EAAE;QAClB,CAACd,CAAC,CAAC,CAAC,CAAC,EAAEa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,CAAC,CAAC,CAAC,CAAC,EAAEb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3B,CAACA,CAAC,CAAC,CAAC,CAAC,EAAEa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,CAAC,CAAC,CAAC,CAAC,EAAEb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3B,CAACA,CAAC,CAAC,CAAC,CAAC,EAAEa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,CAAC,CAAC,CAAC,CAAC,EAAEb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3B,CAACA,CAAC,CAAC,CAAC,CAAC,EAAEa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,CAAC,CAAC,CAAC,CAAC,EAAEb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7B,OAAA;MAEA,IAAIe,QAAQ,KAAKJ,WAAW,EAAE;QAC5B,IAAI,CAAClC,QAAQ,CAACkC,WAAW,CAAC,GAAIC,QAAQ,GAAGvE,CAAC,IAAK,CAAC,CAAA;AAChD,QAAA,KAAK,IAAIuD,CAAC,GAAGe,WAAW,GAAG,CAAC,EAAEf,CAAC,GAAGmB,QAAQ,EAAEnB,CAAC,EAAE,EAAE;AAC/C,UAAA,IAAI,CAACnB,QAAQ,CAACmB,CAAC,CAAC,GAAGvD,CAAC,CAAA;AACtB,SAAA;AACAsE,QAAAA,WAAW,GAAGI,QAAQ,CAAA;AACtBH,QAAAA,QAAQ,GAAGvE,CAAC,CAAA;AACd,OAAA;AACF,KAAA;AAEA,IAAA,IAAI,CAACoC,QAAQ,CAACkC,WAAW,CAAC,GAAIC,QAAQ,GAAG,IAAI,CAACxD,SAAS,IAAK,CAAC,CAAA;AAC7D,IAAA,KAAK,IAAIf,CAAC,GAAGsE,WAAW,GAAG,CAAC,EAAEtE,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC1C,IAAI,CAACoC,QAAQ,CAACpC,CAAC,CAAC,GAAG,IAAI,CAACe,SAAS,CAAA;AACnC,KAAA;AACF,GAAA;AAEA4D,EAAAA,KAAK,GAAI;AACP,IAAA,MAAMC,WAAW,GAAG,IAAI,CAAChE,MAAM,CAACT,MAAM,CAAA;IACtC,MAAM0E,QAAQ,GAAG,EAAE,GAAI,CAAC,IAAI,CAAChF,SAAS,GAAG,CAAC,IAAI,CAAE,CAAA;IAChD,MAAMiF,YAAY,GAAGF,WAAW,IAAI,CAAC,GAAG,IAAI,CAAC/E,SAAS,CAAC,CAAA;IAEvD,IAAIkF,KAAK,GAAGD,YAAY,GAAG,IAAI,CAACnF,OAAO,GAAG,CAAC,CAAA;AAC3C,IAAA,IAAIkD,KAAK,GAAG,IAAI,CAACf,SAAS,CAAA;AAC1B,IAAA,IAAIoB,MAAM,GAAG,IAAI,CAACvB,UAAU,CAAA;AAE5B,IAAA,IAAIqD,GAAG,GAAG9B,MAAM,IAAI,IAAI,CAACzB,eAAe,CAAA;IAExC,IAAIuD,GAAG,IAAI,CAAC,EAAE;AACZA,MAAAA,GAAG,GAAG,CAAC,CAAA;AACT,KAAA;IAEA,KAAK,IAAIhF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgF,GAAG,EAAEhF,CAAC,EAAE,EAAE;MAC5B,IAAI,CAACwC,QAAQ,CAACxC,CAAC,CAAC,GAAG6C,KAAK,IAAK,CAACmC,GAAG,GAAGA,GAAG,GAAGhF,CAAC,GAAGA,CAAC,IAAI,IAAI,CAACgC,OAAO,IAAKgD,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAA;AACjF,KAAA;AAEA,IAAA,IAAIC,IAAI,CAAA;IACR,IAAIL,WAAW,GAAGnF,eAAe,EAAE;MACjC,IAAI,CAACI,SAAS,GAAG,CAAC,CAAA;AAClBoF,MAAAA,IAAI,GAAG,CAAC,CAAA;AACV,KAAC,MAAM,IAAKL,WAAW,GAAG1F,MAAM,KAAM,CAAC,EAAE;MACvC+F,IAAI,GAAG,CAAC,GAAG/F,MAAM,CAAA;AACnB,KAAC,MAAM,IAAK0F,WAAW,GAAGzF,MAAM,KAAM,CAAC,EAAE;MACvC8F,IAAI,GAAG,CAAC,GAAG9F,MAAM,CAAA;AACnB,KAAC,MAAM,IAAKyF,WAAW,GAAGxF,MAAM,KAAM,CAAC,EAAE;MACvC6F,IAAI,GAAG,CAAC,GAAG7F,MAAM,CAAA;AACnB,KAAC,MAAM;MACL6F,IAAI,GAAG,CAAC,GAAG5F,MAAM,CAAA;AACnB,KAAA;IAEA,IAAI6F,GAAG,GAAG,CAAC,CAAA;IAEX,KAAK,IAAIlF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8E,YAAY,GAAG;AACjC,MAAA,IAAIhC,CAAC,GAAG,CAAC,IAAI,CAAClC,MAAM,CAACsE,GAAG,CAAC,GAAG,IAAI,KAAK,IAAI,CAAClE,YAAY,CAAA;AACtD,MAAA,IAAI+B,CAAC,GAAG,CAAC,IAAI,CAACnC,MAAM,CAACsE,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,IAAI,CAAClE,YAAY,CAAA;AAC1D,MAAA,IAAIgC,CAAC,GAAG,CAAC,IAAI,CAACpC,MAAM,CAACsE,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,IAAI,CAAClE,YAAY,CAAA;MAE1D,IAAIuC,CAAC,GAAG,IAAI,CAACK,OAAO,CAACd,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAA;AAC7B,MAAA,IAAI,CAACJ,WAAW,CAACC,KAAK,EAAEU,CAAC,EAAET,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAA;MACnC,IAAIgC,GAAG,KAAK,CAAC,EAAE;AACb,QAAA,IAAI,CAAC/B,UAAU,CAAC+B,GAAG,EAAEzB,CAAC,EAAET,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAA;AAClC,OAAA;AAEAkC,MAAAA,GAAG,IAAID,IAAI,CAAA;MACX,IAAIC,GAAG,IAAIN,WAAW,EAAE;AACtBM,QAAAA,GAAG,IAAIN,WAAW,CAAA;AACpB,OAAA;MAEA,IAAIG,KAAK,KAAK,CAAC,EAAE;AACfA,QAAAA,KAAK,GAAG,CAAC,CAAA;AACX,OAAA;AAEA,MAAA,IAAI,EAAE/E,CAAC,GAAG+E,KAAK,KAAK,CAAC,EAAE;QACrBlC,KAAK,IAAIA,KAAK,GAAGgC,QAAQ,CAAA;AACzB3B,QAAAA,MAAM,IAAIA,MAAM,GAAG,IAAI,CAACtB,SAAS,CAAA;AACjCoD,QAAAA,GAAG,GAAG9B,MAAM,IAAI,IAAI,CAACzB,eAAe,CAAA;QAEpC,IAAIuD,GAAG,IAAI,CAAC,EAAE;AACZA,UAAAA,GAAG,GAAG,CAAC,CAAA;AACT,SAAA;QAEA,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,GAAG,EAAExB,CAAC,EAAE,EAAE;UAC5B,IAAI,CAAChB,QAAQ,CAACgB,CAAC,CAAC,GAAGX,KAAK,IAAK,CAACmC,GAAG,GAAGA,GAAG,GAAGxB,CAAC,GAAGA,CAAC,IAAI,IAAI,CAACxB,OAAO,IAAKgD,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAA;AACjF,SAAA;AACF,OAAA;AACF,KAAA;AACF,GAAA;AAEAG,EAAAA,aAAa,GAAI;IACf,IAAI,CAACR,KAAK,EAAE,CAAA;IACZ,IAAI,CAAChC,SAAS,EAAE,CAAA;IAChB,IAAI,CAAC0B,QAAQ,EAAE,CAAA;AACjB,GAAA;AAEAe,EAAAA,WAAW,GAAI;IACb,MAAMC,GAAG,GAAG,IAAIC,MAAM,CAAC,IAAI,CAAC1F,OAAO,GAAG,CAAC,CAAC,CAAA;IACxC,MAAM2F,KAAK,GAAG,IAAID,MAAM,CAAC,IAAI,CAAC1F,OAAO,CAAC,CAAA;AAEtC,IAAA,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACL,OAAO,EAAEI,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AAC5CuF,MAAAA,KAAK,CAAC,IAAI,CAACpD,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAA;AAC/B,KAAA;IAEA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEuD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEvD,CAAC,GAAG,IAAI,CAACL,OAAO,EAAEI,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;AAC1DwD,MAAAA,CAAC,GAAG+B,KAAK,CAACvF,CAAC,CAAC,CAAA;AACZqF,MAAAA,GAAG,CAAC9B,CAAC,EAAE,CAAC,GAAG,IAAI,CAACpB,OAAO,CAACqB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACpC6B,MAAAA,GAAG,CAAC9B,CAAC,EAAE,CAAC,GAAG,IAAI,CAACpB,OAAO,CAACqB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACpC6B,MAAAA,GAAG,CAAC9B,CAAC,EAAE,CAAC,GAAG,IAAI,CAACpB,OAAO,CAACqB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AACtC,KAAA;AAEA,IAAA,OAAO6B,GAAG,CAAA;AACZ,GAAA;AACF;;ACvTA,SAASG,WAAW,CAAEC,OAAO,EAAEzC,CAAC,EAAED,CAAC,EAAED,CAAC,EAAE;EACtC,IAAI4C,MAAM,GAAG,CAAC,CAAA;AACd,EAAA,IAAIC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;AAE1B,EAAA,KAAK,IAAI3F,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGwF,OAAO,CAACtF,MAAM,EAAEH,CAAC,GAAGC,CAAC,GAAG;IAC1C,MAAM2F,EAAE,GAAG5C,CAAC,GAAGyC,OAAO,CAACzF,CAAC,EAAE,CAAC,CAAA;IAC3B,MAAM6F,EAAE,GAAG9C,CAAC,GAAG0C,OAAO,CAACzF,CAAC,EAAE,CAAC,CAAA;AAC3B,IAAA,MAAM8F,EAAE,GAAGhD,CAAC,GAAG2C,OAAO,CAACzF,CAAC,CAAC,CAAA;AACzB,IAAA,MAAM+F,CAAC,GAAGH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAA;AACrC,IAAA,MAAME,GAAG,GAAGhG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAErB,IAAI+F,CAAC,GAAGJ,IAAI,EAAE;AACZA,MAAAA,IAAI,GAAGI,CAAC,CAAA;AACRL,MAAAA,MAAM,GAAGM,GAAG,CAAA;AACd,KAAA;AAEAhG,IAAAA,CAAC,EAAE,CAAA;AACL,GAAA;AAEA,EAAA,OAAO0F,MAAM,CAAA;AACf,CAAA;AAEO,SAASD,OAAO,CAAE7E,MAAM,EAAEC,OAAO,EAAE;EACxC,MAAMoF,EAAE,GAAG,IAAIvF,QAAQ,CAACE,MAAM,EAAEC,OAAO,CAAC,CAAA;EACxCoF,EAAE,CAACd,aAAa,EAAE,CAAA;EAClB,OAAOc,EAAE,CAACb,WAAW,EAAE,CAAA;AACzB,CAAA;AAEO,SAASc,OAAO,CAAEtF,MAAM,EAAE6E,OAAO,EAAE;EACxC,MAAMS,OAAO,GAAG,EAAE,CAAA;EAClB,MAAMC,IAAI,GAAG,EAAE,CAAA;AAEf,EAAA,KAAK,IAAInG,CAAC,GAAG,CAAC,EAAEuD,CAAC,GAAG,CAAC,EAAEtD,CAAC,GAAGW,MAAM,CAACT,MAAM,EAAEH,CAAC,GAAGC,CAAC,GAAG;AAChD,IAAA,MAAM+C,CAAC,GAAGpC,MAAM,CAACZ,CAAC,EAAE,CAAC,CAAA;AACrB,IAAA,MAAM+C,CAAC,GAAGnC,MAAM,CAACZ,CAAC,EAAE,CAAC,CAAA;AACrB,IAAA,MAAM8C,CAAC,GAAGlC,MAAM,CAACZ,CAAC,EAAE,CAAC,CAAA;IACrB,MAAMwD,CAAC,GAAGR,CAAC,IAAI,EAAE,GAAGD,CAAC,IAAI,CAAC,GAAGD,CAAC,CAAA;IAE9B,IAAIU,CAAC,IAAI2C,IAAI,EAAE;MACbD,OAAO,CAAC3C,CAAC,EAAE,CAAC,GAAG4C,IAAI,CAAC3C,CAAC,CAAC,CAAA;AACxB,KAAC,MAAM;AACL0C,MAAAA,OAAO,CAAC3C,CAAC,EAAE,CAAC,GAAG4C,IAAI,CAAC3C,CAAC,CAAC,GAAGgC,WAAW,CAACC,OAAO,EAAEzC,CAAC,EAAED,CAAC,EAAED,CAAC,CAAC,CAAA;AACxD,KAAA;AACF,GAAA;AAEA,EAAA,OAAOoD,OAAO,CAAA;AAChB,CAAA;AAEO,SAASE,QAAQ,CAAExF,MAAM,EAAEC,OAAO,EAAE;AACzC,EAAA,MAAM8C,CAAC,GAAG8B,OAAO,CAAC7E,MAAM,EAAEC,OAAO,CAAC,CAAA;AAClC,EAAA,MAAMb,CAAC,GAAGkG,OAAO,CAACtF,MAAM,EAAE+C,CAAC,CAAC,CAAA;EAE5B,OAAO;AACL8B,IAAAA,OAAO,EAAE9B,CAAC;AACVuC,IAAAA,OAAO,EAAElG,CAAAA;GACV,CAAA;AACH;;;;"}