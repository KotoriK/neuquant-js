{"version":3,"file":"index.modern.js","sources":["../src/neuquant.js","../src/helpers.js"],"sourcesContent":["/**\r\n * NeuQuant Neural-Network Quantization Algorithm\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * See \"Kohonen neural networks for optimal colour quantization\" in \"Network:\r\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\r\n * the algorithm.\r\n *\r\n * See also http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\r\n * this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons who\r\n * receive copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n *\r\n * Copyright (c) 2012 Johan Nordberg (JavaScript port)\r\n * Copyright (c) 2014 Devon Govett (JavaScript port)\r\n */\r\n\r\nconst prime1 = 499\r\nconst prime2 = 491\r\nconst prime3 = 487\r\nconst prime4 = 503\r\n\r\nconst maxprime = Math.max(prime1, prime2, prime3, prime4)\r\nconst minpicturebytes = (3 * maxprime)\r\n\r\nconst defaults = {\r\n  ncycles: 100,\r\n  netsize: 256,\r\n  samplefac: 10\r\n}\r\n\r\nconst assign = function (target) {\r\n  for (let i = 1, l = arguments.length; i < l; i++) {\r\n    const nextSource = arguments[i]\r\n    if (nextSource != null) {\r\n      for (const nextKey in nextSource) {\r\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\r\n          target[nextKey] = nextSource[nextKey]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return target\r\n}\r\n\r\nexport default class NeuQuant {\r\n  constructor (pixels, options) {\r\n    assign(this, defaults, {pixels}, options)\r\n\r\n    if (this.netsize < 4 || this.netsize > 256) {\r\n      throw new Error('Color count must be between 4 and 256')\r\n    }\r\n\r\n    if (this.samplefac < 1 || this.samplefac > 30) {\r\n      throw new Error('Sampling factor must be between 1 and 30')\r\n    }\r\n\r\n    this.maxnetpos = this.netsize - 1\r\n\r\n    this.netbiasshift = 4\r\n    this.intbiasshift = 16\r\n    this.intbias = (1 << this.intbiasshift)\r\n    this.gammashift = 10\r\n    this.gamma = (1 << this.gammashift)\r\n    this.betashift = 10\r\n    this.beta = (this.intbias >> this.betashift)\r\n    this.betagamma = (this.beta * this.gamma)\r\n\r\n    this.initrad = (this.netsize >> 3)\r\n    this.radiusbiasshift = 6\r\n    this.radiusbias = (1 << this.radiusbiasshift)\r\n    this.initradius = (this.initrad * this.radiusbias)\r\n    this.radiusdec = 30\r\n\r\n    this.alphabiasshift = 10\r\n    this.initalpha = (1 << this.alphabiasshift)\r\n\r\n    this.radbiasshift = 8\r\n    this.radbias = (1 << this.radbiasshift)\r\n    this.alpharadbshift = (this.alphabiasshift + this.radbiasshift)\r\n    this.alpharadbias = (1 << this.alpharadbshift)\r\n\r\n    this.network = []\r\n    this.netindex = new Uint32Array(256)\r\n    this.bias = new Uint32Array(this.netsize)\r\n    this.freq = new Uint32Array(this.netsize)\r\n    this.radpower = new Uint32Array(this.netsize >> 3)\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      let v = (i << (this.netbiasshift + 8)) / this.netsize\r\n      this.network[i] = new Float64Array([v, v, v, 0])\r\n      this.freq[i] = this.intbias / this.netsize\r\n      this.bias[i] = 0\r\n    }\r\n  }\r\n\r\n  unbiasnet () {\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      this.network[i][0] >>= this.netbiasshift\r\n      this.network[i][1] >>= this.netbiasshift\r\n      this.network[i][2] >>= this.netbiasshift\r\n      this.network[i][3] = i\r\n    }\r\n  }\r\n\r\n  altersingle (alpha, i, b, g, r) {\r\n    this.network[i][0] -= (alpha * (this.network[i][0] - b)) / this.initalpha\r\n    this.network[i][1] -= (alpha * (this.network[i][1] - g)) / this.initalpha\r\n    this.network[i][2] -= (alpha * (this.network[i][2] - r)) / this.initalpha\r\n  }\r\n\r\n  alterneigh (radius, i, b, g, r) {\r\n    const lo = Math.abs(i - radius)\r\n    const hi = Math.min(i + radius, this.netsize)\r\n\r\n    let j = i + 1\r\n    let k = i - 1\r\n    let m = 1\r\n\r\n    while ((j < hi) || (k > lo)) {\r\n      const a = this.radpower[m++]\r\n\r\n      if (j < hi) {\r\n        const p = this.network[j++]\r\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\r\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\r\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\r\n      }\r\n\r\n      if (k > lo) {\r\n        const p = this.network[k--]\r\n        p[0] -= (a * (p[0] - b)) / this.alpharadbias\r\n        p[1] -= (a * (p[1] - g)) / this.alpharadbias\r\n        p[2] -= (a * (p[2] - r)) / this.alpharadbias\r\n      }\r\n    }\r\n  }\r\n\r\n  contest (b, g, r) {\r\n    let bestd = ~(1 << 31)\r\n    let bestbiasd = bestd\r\n    let bestpos = -1\r\n    let bestbiaspos = bestpos\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      let n = this.network[i]\r\n\r\n      let dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r)\r\n      if (dist < bestd) {\r\n        bestd = dist\r\n        bestpos = i\r\n      }\r\n\r\n      let biasdist = dist - ((this.bias[i]) >> (this.intbiasshift - this.netbiasshift))\r\n      if (biasdist < bestbiasd) {\r\n        bestbiasd = biasdist\r\n        bestbiaspos = i\r\n      }\r\n\r\n      let betafreq = (this.freq[i] >> this.betashift)\r\n      this.freq[i] -= betafreq\r\n      this.bias[i] += (betafreq << this.gammashift)\r\n    }\r\n\r\n    this.freq[bestpos] += this.beta\r\n    this.bias[bestpos] -= this.betagamma\r\n\r\n    return bestbiaspos\r\n  }\r\n\r\n  inxbuild () {\r\n    let previouscol = 0\r\n    let startpos = 0\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      let p = this.network[i]\r\n      let q = null\r\n      let smallpos = i\r\n      let smallval = p[1]\r\n\r\n      for (let j = i + 1; j < l; j++) {\r\n        q = this.network[j]\r\n        if (q[1] < smallval) {\r\n          smallpos = j\r\n          smallval = q[1]\r\n        }\r\n      }\r\n      q = this.network[smallpos]\r\n\r\n      if (i !== smallpos) {\r\n        [p[0], q[0]] = [q[0], p[0]];\r\n        [p[1], q[1]] = [q[1], p[1]];\r\n        [p[2], q[2]] = [q[2], p[2]];\r\n        [p[3], q[3]] = [q[3], p[3]]\r\n      }\r\n\r\n      if (smallval !== previouscol) {\r\n        this.netindex[previouscol] = (startpos + i) >> 1\r\n        for (let j = previouscol + 1; j < smallval; j++) {\r\n          this.netindex[j] = i\r\n        }\r\n        previouscol = smallval\r\n        startpos = i\r\n      }\r\n    }\r\n\r\n    this.netindex[previouscol] = (startpos + this.maxnetpos) >> 1\r\n    for (let i = previouscol + 1; i < 256; i++) {\r\n      this.netindex[i] = this.maxnetpos\r\n    }\r\n  }\r\n\r\n  learn () {\r\n    const lengthcount = this.pixels.length\r\n    const alphadec = 30 + ((this.samplefac - 1) / 3)\r\n    const samplepixels = lengthcount / (3 * this.samplefac)\r\n\r\n    let delta = samplepixels / this.ncycles | 0\r\n    let alpha = this.initalpha\r\n    let radius = this.initradius\r\n\r\n    let rad = radius >> this.radiusbiasshift\r\n\r\n    if (rad <= 1) {\r\n      rad = 0\r\n    }\r\n\r\n    for (let i = 0; i < rad; i++) {\r\n      this.radpower[i] = alpha * (((rad * rad - i * i) * this.radbias) / (rad * rad))\r\n    }\r\n\r\n    let step\r\n    if (lengthcount < minpicturebytes) {\r\n      this.samplefac = 1\r\n      step = 3\r\n    } else if ((lengthcount % prime1) !== 0) {\r\n      step = 3 * prime1\r\n    } else if ((lengthcount % prime2) !== 0) {\r\n      step = 3 * prime2\r\n    } else if ((lengthcount % prime3) !== 0) {\r\n      step = 3 * prime3\r\n    } else {\r\n      step = 3 * prime4\r\n    }\r\n\r\n    let pix = 0\r\n\r\n    for (let i = 0; i < samplepixels;) {\r\n      let b = (this.pixels[pix] & 0xff) << this.netbiasshift\r\n      let g = (this.pixels[pix + 1] & 0xff) << this.netbiasshift\r\n      let r = (this.pixels[pix + 2] & 0xff) << this.netbiasshift\r\n\r\n      let j = this.contest(b, g, r)\r\n      this.altersingle(alpha, j, b, g, r)\r\n      if (rad !== 0) {\r\n        this.alterneigh(rad, j, b, g, r)\r\n      }\r\n\r\n      pix += step\r\n      if (pix >= lengthcount) {\r\n        pix -= lengthcount\r\n      }\r\n\r\n      if (delta === 0) {\r\n        delta = 1\r\n      }\r\n\r\n      if (++i % delta === 0) {\r\n        alpha -= alpha / alphadec\r\n        radius -= radius / this.radiusdec\r\n        rad = radius >> this.radiusbiasshift\r\n\r\n        if (rad <= 1) {\r\n          rad = 0\r\n        }\r\n\r\n        for (let k = 0; k < rad; k++) {\r\n          this.radpower[k] = alpha * (((rad * rad - k * k) * this.radbias) / (rad * rad))\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  buildColorMap () {\r\n    this.learn()\r\n    this.unbiasnet()\r\n    this.inxbuild()\r\n  }\r\n\r\n  getColorMap () {\r\n    const map = new Buffer(this.netsize * 3)\r\n    const index = new Buffer(this.netsize)\r\n\r\n    for (let i = 0, l = this.netsize; i < l; i++) {\r\n      index[this.network[i][3]] = i\r\n    }\r\n\r\n    for (let i = 0, j = 0, k = 0, l = this.netsize; i < l; i++) {\r\n      k = index[i]\r\n      map[j++] = this.network[k][0] & 0xff\r\n      map[j++] = this.network[k][1] & 0xff\r\n      map[j++] = this.network[k][2] & 0xff\r\n    }\r\n\r\n    return map\r\n  }\r\n}\r\n","import NeuQuant from './neuquant'\r\n\r\nfunction findClosest (palette, r, g, b) {\r\n  let minpos = 0\r\n  let mind = 256 * 256 * 256\r\n\r\n  for (let i = 0, l = palette.length; i < l;) {\r\n    const dr = r - palette[i++]\r\n    const dg = g - palette[i++]\r\n    const db = b - palette[i]\r\n    const d = dr * dr + dg * dg + db * db\r\n    const pos = i / 3 | 0\r\n\r\n    if (d < mind) {\r\n      mind = d\r\n      minpos = pos\r\n    }\r\n\r\n    i++\r\n  }\r\n\r\n  return minpos\r\n}\r\n\r\nexport function palette (pixels, options) {\r\n  const nq = new NeuQuant(pixels, options)\r\n  nq.buildColorMap()\r\n  return nq.getColorMap()\r\n}\r\n\r\nexport function indexed (pixels, palette) {\r\n  const indexed = new Buffer(pixels.length / 3)\r\n  const memo = {}\r\n\r\n  for (let i = 0, j = 0, l = pixels.length; i < l;) {\r\n    const r = pixels[i++]\r\n    const g = pixels[i++]\r\n    const b = pixels[i++]\r\n    const k = r << 16 | g << 8 | b\r\n\r\n    if (k in memo) {\r\n      indexed[j++] = memo[k]\r\n    } else {\r\n      indexed[j++] = memo[k] = findClosest(palette, r, g, b)\r\n    }\r\n  }\r\n\r\n  return indexed\r\n}\r\n\r\nexport function quantize (pixels, options) {\r\n  const p = palette(pixels, options)\r\n  const i = indexed(pixels, p)\r\n\r\n  return {\r\n    palette: p,\r\n    indexed: i\r\n  }\r\n}\r\n"],"names":["minpicturebytes","Math","max","defaults","ncycles","netsize","samplefac","constructor","pixels","options","target","l","arguments","length","i","nextSource","nextKey","Object","prototype","hasOwnProperty","call","assign","this","Error","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","radbiasshift","radbias","alpharadbshift","alpharadbias","network","netindex","Uint32Array","bias","freq","radpower","Float64Array","v","unbiasnet","altersingle","alpha","b","g","r","alterneigh","radius","lo","abs","hi","min","j","k","m","a","p","contest","bestd","bestbiasd","bestpos","bestbiaspos","n","dist","biasdist","betafreq","inxbuild","previouscol","q","smallpos","smallval","startpos","learn","lengthcount","alphadec","step","delta","samplepixels","rad","pix","buildColorMap","getColorMap","map","Buffer","index","palette","minpos","mind","dr","dg","db","d","pos","NeuQuant","nq","indexed","memo","findClosest","quantize"],"mappings":"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"}